{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","historyIndex","slice","length","calculateWinner","setState","concat","step","status","current","winner","isDraw","calculateDraw","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"kOAIE,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,Q,IAKPC,E,kKAEJ,SAAaC,GAAI,IAAD,OACd,OAAS,cAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GACzCH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,oBAMtC,WACE,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA1BTC,IAAMC,WAiCpBC,E,kDACJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,QAAS,CAAC,CACRN,QAASO,MAAM,GAAGC,KAAK,QAEzBC,WAAY,EACZC,SAAS,EACTC,aAAcJ,MAAM,GAAGC,KAAK,OARb,E,+CAYnB,SAAYV,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQM,MAAM,EAAGb,KAAKM,MAAMI,WAAa,GAC9DE,EAAeZ,KAAKM,MAAMM,aAAaC,MAAM,EAAEb,KAAKM,MAAMI,WAAa,GAEvET,EADUM,EAAQA,EAAQO,OAAS,GACjBb,QAAQY,QAG7BE,EAAgBd,IAAYA,EAAQF,KAGvCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKgB,SAAS,CACZT,QAASA,EAAQU,OAAO,CAAC,CACvBhB,QAASA,KAEXS,WAAWH,EAAQO,OACnBH,SAAUX,KAAKM,MAAMK,QACrBC,aAAcA,EAAaK,OAAOlB,Q,oBAItC,SAAOmB,GACLlB,KAAKgB,SAAS,CACZN,WAAYQ,EACZP,QAAUO,EAAO,IAAO,M,oBAI5B,WAAU,IAiBJC,EAjBG,OACDZ,EAAUP,KAAKM,MAAMC,QACrBa,EAAUb,EAAQP,KAAKM,MAAMI,YAC7BW,EAASN,EAAgBK,EAAQnB,SACjCqB,EAwEV,SAAuBrB,GACrB,IAAI,IAAIF,EAAE,EAAGA,EAAIE,EAAQa,OAAQf,IAC/B,IAAGE,EAAQF,GAIT,OAAO,EAGX,OAAO,EAjFUwB,CAAcH,EAAQnB,SAE/BuB,EAAQjB,EAAQkB,KAAI,SAACP,EAAMQ,GAC/B,IAAMC,EAAOD,EACX,cAAgBA,EAChB,mBACF,OACE,6BACE,wBAAQ9B,QAAS,kBAAM,EAAKgC,OAAOF,IAAnC,SAA2CC,KADpCD,MAoBb,OAZEP,EADCE,EACQ,WAAaA,EAEhBC,EACG,aAGA,iBAAmBtB,KAAKM,MAAMK,QAAU,IAAM,KAOvD,sBAAKhB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEG,QAASmB,EAAQnB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK8B,YAAY9B,QAGrC,sBAAKJ,UAAU,YAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BwB,IAC9B,6BAAKK,c,GAlFIrB,IAAMC,WAgGzB,SAASW,EAAgBd,GAYvB,IAXA,IAAM6B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGD/B,EAAE,EAAGA,EAAI+B,EAAMhB,OAAQf,IAAK,CAClC,kBAAkB+B,EAAM/B,GAAxB,GAAOgC,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAGhC,EAAQ8B,IAAM9B,EAAQ8B,KAAO9B,EAAQ+B,IAAM/B,EAAQ8B,KAAO9B,EAAQgC,GACnE,OAAOhC,EAAQ8B,GAGnB,OAAO,KAvBTG,IAASC,OACP,cAAC9B,EAAD,IACA+B,SAASC,eAAe,W","file":"static/js/main.1b891e7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n  function Square(props) {\r\n    return (\r\n      <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    \r\n    renderSquare(i) {\r\n      return ( <Square value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n       />\r\n       \r\n       );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n        }],\r\n        stepNumber: 0,\r\n        xIsNext: true,\r\n        historyIndex: Array(9).fill(null),\r\n      };\r\n    }\r\n\r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const historyIndex = this.state.historyIndex.slice(0,this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      // const currentIndex = historyIndex[history.length - 1];\r\n      \r\n      if(calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        history: history.concat([{\r\n          squares: squares,\r\n        }]),\r\n        stepNumber:history.length,\r\n        xIsNext: !this.state.xIsNext,\r\n        historyIndex: historyIndex.concat(i),\r\n      });\r\n    }\r\n\r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n      });\r\n    }\r\n    \r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n      const isDraw = calculateDraw(current.squares);\r\n      \r\n      const moves = history.map((step, move) => {\r\n        const desc = move ? \r\n          'Go to move#' + move:\r\n          'Go to game start';\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n\r\n      var status;\r\n      if(winner) {\r\n        status = 'Winner: ' + winner;\r\n      }\r\n      else if(isDraw) {\r\n        status = 'Its a DRAW';\r\n      }\r\n      else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? 'X' : '0');\r\n      }\r\n      \r\n\r\n      \r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n              squares={current.squares} \r\n              onClick={(i) => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div className=\"game-status\">{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    for(let i=0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c] ) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  function calculateDraw(squares) {\r\n    for(let i=0; i < squares.length; i++) {\r\n      if(squares[i]) {\r\n\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }"],"sourceRoot":""}